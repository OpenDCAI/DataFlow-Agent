"""
Auto-generated by pipeline_assembler
"""
from dataflow.pipeline import PipelineABC
from dataflow.utils.storage import FileStorage
from dataflow.serving import APILLMServing_request, LocalModelLLMServing_vllm

from dataflow.operators.code import CodeDocumentQualityFilter, CodeDocumentQualitySampleEvaluator, CodeLengthSampleEvaluator, CodeLengthSampleFilter, CodeTextCompositionSampleEvaluator



class RecommendPipeline(PipelineABC):
    def __init__(self):
        super().__init__()
        # -------- FileStorage --------
        self.storage = FileStorage(
            first_entry_file_name="/tmp/translation_sample_10.jsonl",
            cache_path="/mnt/DataFlow/lz/proj/DataFlow-Agent/cache_dir",
            file_name_prefix="dataflow_cache_step",
            cache_type="jsonl",
        )
        # -------- LLM Serving (Remote) --------
        self.llm_serving = APILLMServing_request(
            api_url="http://123.129.219.111:3000/v1/chat/completions",
            key_name_of_api_key="DF_API_KEY",
            model_name="gpt-4o",
            max_workers=100,
        )

        self.code_document_quality_sample_evaluator = CodeDocumentQualitySampleEvaluator(thresholds=None)
        self.code_document_quality_filter = CodeDocumentQualityFilter(min_score=1.0, max_score=1.0, thresholds=None)
        self.code_length_sample_evaluator = CodeLengthSampleEvaluator()
        self.code_length_sample_filter = CodeLengthSampleFilter(min_score=1.0, max_score=1.0)
        self.code_text_composition_sample_evaluator = CodeTextCompositionSampleEvaluator()

    def forward(self):
        self.code_document_quality_sample_evaluator.run(
            storage=self.storage.step(), input_key=None
        )
        self.code_document_quality_filter.run(
            storage=self.storage.step(), input_key=None, output_key='doc_quality_filter_label'
        )
        self.code_length_sample_evaluator.run(
            storage=self.storage.step(), input_key=None
        )
        self.code_length_sample_filter.run(
            storage=self.storage.step(), input_key=None, output_key='length_filter_label'
        )
        self.code_text_composition_sample_evaluator.run(
            storage=self.storage.step(), input_key=None
        )

if __name__ == "__main__":
    pipeline = RecommendPipeline()
    pipeline.compile()
    pipeline.forward()

"""
Auto-generated by pipeline_assembler
"""
from dataflow.pipeline import PipelineABC
from dataflow.utils.storage import FileStorage
from dataflow.serving import APILLMServing_request, LocalModelLLMServing_vllm

from dataflow.operators.core_text import EmbeddingGenerator, GeneralFilter, PandasOperator, PromptedFilter, PromptedRefiner



class RecommendPipeline(PipelineABC):
    def __init__(self):
        super().__init__()
        # -------- FileStorage --------
        self.storage = FileStorage(
            first_entry_file_name="/tmp/translation_sample_10.jsonl",
            cache_path="/mnt/DataFlow/lz/proj/DataFlow-Agent/cache_dir",
            file_name_prefix="dataflow_cache_step",
            cache_type="jsonl",
        )
        # -------- LLM Serving (Remote) --------
        self.llm_serving = APILLMServing_request(
            api_url="http://123.129.219.111:3000/v1/chat/completions",
            key_name_of_api_key="DF_API_KEY",
            model_name="gpt-4o",
            max_workers=100,
        )

        self.prompted_filter = PromptedFilter(llm_serving=self.llm_serving, system_prompt='Please evaluate the quality of this data on a scale from 1 to 5.', min_score=1, max_score=5)
        self.general_filter = GeneralFilter(filter_rules=None)
        self.prompted_refiner = PromptedRefiner(llm_serving=self.llm_serving, system_prompt='You are a helpful agent.')
        self.embedding_generator = EmbeddingGenerator(embedding_serving=None)
        self.pandas_operator = PandasOperator(process_fn=None)

    def forward(self):
        self.prompted_filter.run(
            storage=self.storage.step(), input_key='raw_content', output_key='eval'
        )
        self.general_filter.run(
            storage=self.storage.step()
        )
        self.prompted_refiner.run(
            storage=self.storage.step(), input_key='raw_content'
        )
        self.embedding_generator.run(
            storage=self.storage.step(), input_key='text', output_key='embeddings'
        )
        self.pandas_operator.run(
            storage=self.storage.step()
        )

if __name__ == "__main__":
    pipeline = RecommendPipeline()
    pipeline.compile()
    pipeline.forward()
